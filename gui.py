#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.20
#  in conjunction with Tcl version 8.6
#    Mar 29, 2019 08:11:11 AM -0300  platform: Windows NT

import sys
import pandas as pd
import tkinter as tk
from tkinter import messagebox
from scipy import interpolate

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import main

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    main.set_Tk_var()
    top = Toplevel1 (root)
    main.init(root, top)
    root.mainloop()

w = None
def create_Toplevel1(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel (root)
    main.set_Tk_var()
    top = Toplevel1 (w)
    main.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Toplevel1():
    global w
    w.destroy()
    w = None

class Toplevel1:
    def __init__(self, top=None):
        #criação da interface do programa
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("946x579+314+126")
        top.title("Calculo Chiller")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")
                      
        self.dado = pd.read_excel("tabela.xlsx",sheet_name = "Planilha1")
        self.tipo_carga = list(self.dado['Tipo de carga'].unique())
        self.padrao_carga = list(self.dado['Padrão de instalação'].unique())
        

        self.Label1 = tk.Label(top)
        self.Label1.place(relx=0.021, rely=0.069, height=21, width=59)
        self.Label1.configure(activebackground="#f9f9f9")
        self.Label1.configure(activeforeground="black")
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(highlightbackground="#d9d9d9")
        self.Label1.configure(highlightcolor="black")
        self.Label1.configure(text='''Área (m²):''')
        

        self.entryarea = ttk.Entry(top)
        self.entryarea.place(relx=0.169, rely=0.069, relheight=0.036
                , relwidth=0.08)
        self.entryarea.configure(width=76)
        self.entryarea.configure(background="#ef1fb1")
        self.entryarea.configure(takefocus="")
        self.entryarea.configure(font="TkFixedFont")
        self.entryarea.configure(cursor="ibeam")

        self.tipo_selecionado = tk.StringVar()
        self.tipodecarga = ttk.Combobox(top)
        self.tipodecarga.place(relx=0.169, rely=0.121, relheight=0.036
                , relwidth=0.257)
        self.tipodecarga.configure(font="TkFixedFont")
        self.tipodecarga.configure(textvariable=self.tipo_selecionado)
        self.tipodecarga['values'] = self.tipo_carga
        self.tipodecarga.set(self.tipo_carga[0])

        self.Label2 = tk.Label(top)
        self.Label2.place(relx=0.021, rely=0.121, height=21, width=80)
        self.Label2.configure(activebackground="#f9f9f9")
        self.Label2.configure(activeforeground="black")
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(highlightbackground="#d9d9d9")
        self.Label2.configure(highlightcolor="black")
        self.Label2.configure(text='''Tipo de carga:''')

        self.Label3 = tk.Label(top)
        self.Label3.place(relx=0.021, rely=0.173, height=21, width=118)
        self.Label3.configure(activebackground="#f9f9f9")
        self.Label3.configure(activeforeground="black")
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(highlightbackground="#d9d9d9")
        self.Label3.configure(highlightcolor="black")
        self.Label3.configure(text='''Padrão de instalação:''')

        self.carga_selecionada = tk.StringVar()
        self.padrao = ttk.Combobox(top)
        self.padrao.place(relx=0.169, rely=0.173, relheight=0.036
                , relwidth=0.151)
        self.padrao.configure(font="TkFixedFont")
        self.padrao.configure(textvariable=self.carga_selecionada)
        self.padrao['values'] = self.padrao_carga
        self.padrao.set(self.padrao_carga[0])

        self.calc = tk.Button(top)
        self.calc.place(relx=0.391, rely=0.908, height=24, width=227)
        self.calc.configure(activebackground="#ececec")
        self.calc.configure(activeforeground="#000000")
        self.calc.configure(background="#d9d9d9")
        self.calc.configure(disabledforeground="#a3a3a3")
        self.calc.configure(foreground="#000000")
        self.calc.configure(highlightbackground="#d9d9d9")
        self.calc.configure(highlightcolor="black")
        self.calc.configure(pady="0")
        self.calc.configure(text='''Calcular''')
        self.calc.configure(width=227)
        self.calc.configure(command = self.calculadora)

        self.Label4 = tk.Label(top)
        self.Label4.place(relx=0.017, rely=0.644, height=21, width=83)
        self.Label4.configure(background="#d9d9d9")
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(text='''Carga térmica:''')

        self.resp_carga = tk.Label(top)
        self.resp_carga.place(relx=0.18, rely=0.644, height=21, width=80)
        self.resp_carga.configure(background="#d9d9d9")
        self.resp_carga.configure(disabledforeground="#a3a3a3")
        self.resp_carga.configure(foreground="#000000")
        self.resp_carga_texto = tk.StringVar()                      
        self.resp_carga['textvariable'] = self.resp_carga_texto

        self.Label6 = tk.Label(top)
        self.Label6.place(relx=0.017, rely=0.711, height=21, width=110)
        self.Label6.configure(background="#d9d9d9")
        self.Label6.configure(disabledforeground="#a3a3a3")
        self.Label6.configure(foreground="#000000")
        self.Label6.configure(text='''Ar de insuflamento:''')

        self.ar = tk.Label(top)
        self.ar.place(relx=0.18, rely=0.711, height=21, width=80)
        self.ar.configure(background="#d9d9d9")
        self.ar.configure(disabledforeground="#a3a3a3")
        self.ar.configure(foreground="#000000")
        self.ar_texto = tk.StringVar()                      
        self.ar['textvariable'] = self.ar_texto

        self.Label8 = tk.Label(top)
        self.Label8.place(relx=0.017, rely=0.778, height=21, width=50)
        self.Label8.configure(background="#d9d9d9")
        self.Label8.configure(disabledforeground="#a3a3a3")
        self.Label8.configure(foreground="#000000")
        self.Label8.configure(text='''Pessoas:''')

        
        self.pessoas = tk.Label(top)
        self.pessoas.place(relx=0.18, rely=0.778, height=21, width=80)
        self.pessoas.configure(background="#d9d9d9")
        self.pessoas.configure(disabledforeground="#a3a3a3")
        self.pessoas.configure(foreground="#000000")
        self.pessoas_texto = tk.StringVar()                      
        self.pessoas['textvariable'] = self.pessoas_texto
        self.pessoas = tk.Label(top)
        self.pessoas.place(relx=0.074, rely=0.604, height=21, width=6)
        self.pessoas.configure(activebackground="#f9f9f9")
        self.pessoas.configure(activeforeground="black")
        self.pessoas.configure(background="#d9d9d9")
        self.pessoas.configure(disabledforeground="#a3a3a3")
        self.pessoas.configure(foreground="#000000")
        self.pessoas.configure(highlightbackground="#d9d9d9")
        self.pessoas.configure(highlightcolor="black")

        self.style.configure('TNotebook.Tab', background=_bgcolor)
        self.style.configure('TNotebook.Tab', foreground=_fgcolor)
        self.style.map('TNotebook.Tab', background=
            [('selected', _compcolor), ('active',_ana2color)])
        self.TNotebook1 = ttk.Notebook(top)
        self.TNotebook1.place(relx=0.444, rely=0.096, relheight=0.678
                , relwidth=0.512)
        self.TNotebook1.configure(width=484)
        self.TNotebook1.configure(takefocus="")
        self.TNotebook1_t0 = tk.Frame(self.TNotebook1)
        self.TNotebook1.add(self.TNotebook1_t0, padding=3)
        self.TNotebook1.tab(0, text="R134a",compound="left",underline="-1",)
        self.TNotebook1_t0.configure(background="#d9d9d9")
        self.TNotebook1_t0.configure(highlightbackground="#d9d9d9")
        self.TNotebook1_t0.configure(highlightcolor="black")

        self.Respostas = tk.Text(self.TNotebook1_t0)
        self.Respostas.place(relx=0.021, rely=0.036, relheight=0.933
                , relwidth=0.967)
        self.Respostas.configure(background="white")
        self.Respostas.configure(font="TkTextFont")
        self.Respostas.configure(foreground="black")
        self.Respostas.configure(highlightbackground="#d9d9d9")
        self.Respostas.configure(highlightcolor="black")
        self.Respostas.configure(insertbackground="black")
        self.Respostas.configure(selectbackground="#c4c4c4")
        self.Respostas.configure(selectforeground="black")
        self.Respostas.configure(width=464)
        self.Respostas.configure(wrap="word")
        self.Respostas['state'] = 'normal'
        self.Respostas['state'] = 'disabled'

        self.Label5 = tk.Label(top)
        self.Label5.place(relx=0.021, rely=0.225, height=21, width=100)
        self.Label5.configure(background="#d9d9d9")
        self.Label5.configure(disabledforeground="#a3a3a3")
        self.Label5.configure(foreground="#000000")
        self.Label5.configure(text='''Temperatura (ºC):''')

        self.Entrytemp = tk.Entry(top)
        self.Entrytemp.place(relx=0.169, rely=0.225,height=20, relwidth=0.057)
        self.Entrytemp.configure(background="white")
        self.Entrytemp.configure(disabledforeground="#a3a3a3")
        self.Entrytemp.configure(font="TkFixedFont")
        self.Entrytemp.configure(foreground="#000000")
        self.Entrytemp.configure(insertbackground="black")
        self.Entrytemp.configure(width=54)

        self.Label7 = tk.Label(top)
        self.Label7.place(relx=0.021, rely=0.276, height=21, width=164)
        self.Label7.configure(background="#d9d9d9")
        self.Label7.configure(disabledforeground="#a3a3a3")
        self.Label7.configure(foreground="#000000")
        self.Label7.configure(text='''Pressão do Compressor (KPa):''')

        self.Entrycompr = tk.Entry(top)
        self.Entrycompr.place(relx=0.201, rely=0.276,height=20, relwidth=0.078)
        self.Entrycompr.configure(background="white")
        self.Entrycompr.configure(disabledforeground="#a3a3a3")
        self.Entrycompr.configure(font="TkFixedFont")
        self.Entrycompr.configure(foreground="#000000")
        self.Entrycompr.configure(insertbackground="black")
        self.Entrycompr.configure(width=74)

        self.Label9 = tk.Label(top)
        self.Label9.place(relx=0.021, rely=0.328, height=21, width=204)
        self.Label9.configure(background="#d9d9d9")
        self.Label9.configure(disabledforeground="#a3a3a3")
        self.Label9.configure(foreground="#000000")
        self.Label9.configure(text='''Eficiência isentropica do Compressor:''')

        self.Entryefici = tk.Entry(top)
        self.Entryefici.place(relx=0.243, rely=0.328,height=20, relwidth=0.089)
        self.Entryefici.configure(background="white")
        self.Entryefici.configure(disabledforeground="#a3a3a3")
        self.Entryefici.configure(font="TkFixedFont")
        self.Entryefici.configure(foreground="#000000")
        self.Entryefici.configure(insertbackground="black")
        self.Entryefici.configure(width=84)

        self.Label10 = tk.Label(top)
        self.Label10.place(relx=0.021, rely=0.38, height=21, width=123)
        self.Label10.configure(background="#d9d9d9")
        self.Label10.configure(disabledforeground="#a3a3a3")
        self.Label10.configure(foreground="#000000")
        self.Label10.configure(text='''Eficiência Absorvedor:''')

        self.Entryeficiab = tk.Entry(top)
        self.Entryeficiab.place(relx=0.169, rely=0.38, height=20, relwidth=0.089)

        self.Entryeficiab.configure(background="white")
        self.Entryeficiab.configure(disabledforeground="#a3a3a3")
        self.Entryeficiab.configure(font="TkFixedFont")
        self.Entryeficiab.configure(foreground="#000000")
        self.Entryeficiab.configure(insertbackground="black")
        self.Entryeficiab.configure(width=84)

        self.Label11 = tk.Label(top)
        self.Label11.place(relx=0.021, rely=0.432, height=21, width=128)
        self.Label11.configure(background="#d9d9d9")
        self.Label11.configure(disabledforeground="#a3a3a3")
        self.Label11.configure(foreground="#000000")
        self.Label11.configure(text='''Altura reservatorio (m):''')

        self.Entryreservatorio = tk.Entry(top)
        self.Entryreservatorio.place(relx=0.18, rely=0.432, height=20
                , relwidth=0.057)
        self.Entryreservatorio.configure(background="white")
        self.Entryreservatorio.configure(disabledforeground="#a3a3a3")
        self.Entryreservatorio.configure(font="TkFixedFont")
        self.Entryreservatorio.configure(foreground="#000000")
        self.Entryreservatorio.configure(insertbackground="black")
        self.Entryreservatorio.configure(width=54)

        self.Label12 = tk.Label(top)
        self.Label12.place(relx=0.021, rely=0.484, height=21, width=141)
        self.Label12.configure(background="#d9d9d9")
        self.Label12.configure(disabledforeground="#a3a3a3")
        self.Label12.configure(foreground="#000000")
        self.Label12.configure(text='''Altura coluna d'água (m):''')

        self.Entrycoluna = tk.Entry(top)
        self.Entrycoluna.place(relx=0.18, rely=0.484,height=20, relwidth=0.057)
        self.Entrycoluna.configure(background="white")
        self.Entrycoluna.configure(disabledforeground="#a3a3a3")
        self.Entrycoluna.configure(font="TkFixedFont")
        self.Entrycoluna.configure(foreground="#000000")
        self.Entrycoluna.configure(insertbackground="black")
        self.Entrycoluna.configure(width=54)
        
    ''' Função para calcular os parametros do ar condicionado'''                       
    def calculadora(self): 
        ''' Recebe os valores digitados'''
        tipo1 = self.tipo_selecionado.get()
        carga1 = self.carga_selecionada.get()
        
        ''' Busca nas tabelas os valores correspondente'''
        carga_kcal = float(self.dado[(self.dado['Tipo de carga'] == tipo1) & (self.dado['Padrão de instalação'] == carga1)]['kcal/m²'])
        ar_insu = float(self.dado[(self.dado['Tipo de carga'] == tipo1) & (self.dado['Padrão de instalação'] == carga1)]['m³/h\npor \nmetro \nquadrado'])
        metro_por_pessoa = float(self.dado[(self.dado['Tipo de carga'] == tipo1) & (self.dado['Padrão de instalação'] == carga1)]['Metros \nquadrados \npor pessoa'])
        
        try: #verifica se o que foi digitado é Float e efetua os calculos de energia
            area = float(self.entryarea.get())
            carga_total = round(carga_kcal * area,0)           
            ar_total = round(area * ar_insu,0)
            pessoas_total = round(area/metro_por_pessoa,0)
            
            self.resp_carga_texto.set("{} Kcal/h".format(carga_total))
            self.pessoas_texto.set("{0:.0f} pessoas".format(pessoas_total))
            self.ar_texto.set("{} m³/h".format(ar_total))
        except:
            messagebox.showinfo(icon='info',message='Área invalida') 
            return False
            
            
        self.Respostas['state'] = 'normal'
        
        # Dados de entrada do usuario e constantes
        P2 = float(self.Entrycompr.get())
        P3 = P2*0.98
        temperatura_1 = float(self.Entrytemp.get())
        e_t = float(self.Entryeficiab.get())
        eficiencia = float(self.Entryefici.get())
        H = float(self.Entryreservatorio.get())
        g = 9.807
        ro = 1000
        P8 = 101.325
        H_r = float(self.Entrycoluna.get())
        
        
        
        
        #PONTO 1
        #interpolação cubica para encontrar os valores
        dados_r134 = pd.read_excel("tabelas_termicas.xlsx", sheet_name = 'R134a Saturado')
        temps_r134 = dados_r134['Temperatura °C']
        hvs_r134 = dados_r134['Vapor hv']
        svs_r134 = dados_r134['Vapor sv']
        p_r134 = dados_r134['Pressão kPa']
        f_r134 = interpolate.interp1d(temps_r134,hvs_r134,kind='cubic')
        f2_r134 = interpolate.interp1d(temps_r134,p_r134,kind='cubic')
        f3_r134 = interpolate.interp1d(temps_r134,svs_r134,kind='cubic')
        self.Respostas.insert('1.0',"h1 = {}kJ/kg \n".format(f_r134(temperatura_1)))
        self.Respostas.insert('2.0',"Pressão 1 = {}KPa \n".format(f2_r134(temperatura_1)) )

        h1_r134 = f_r134(temperatura_1)
        s1_r134 = f3_r134(temperatura_1)

        #PONTO 2
        #encontrar a pressão mais proxima da tabela
        s2_r134 = s1_r134
        pressao_r134 = [50,100,150,200,300,450,500,600,800,1000,1200,1400,1600,2000,3000,4000,6000,10000]
        for a in range(len(pressao_r134)):
            if pressao_r134[a] == P2:
                p2a = pressao_r134[a]
            elif pressao_r134[a] <= P2 and pressao_r134[a+1] >= P2:
                if (P2 - pressao_r134[a]) >= (pressao_r134[a+1] - P2):
                    p2a = pressao_r134[a+1]
                else:
                    p2a = pressao_r134[a]
            if P2 < pressao_r134[0]:
                p2a = pressao_r134[0]
            if P2 > pressao_r134[-1]:
                p2a = pressao_r134[-1]
        #encontra a tabela para a pressão correta
        tabela = '{}k'.format(p2a)
        dado_r134 = pd.read_excel("R134a.xlsx", sheet_name = tabela)
        s_r134 = dado_r134['Entropia s  kJ/kg-K']/10000 #devido a formatação do Excel os numeros ficaram errados.
        s_r134 = list(s_r134.dropna())
        #verifica se o fluido está no intervalo de super aquecido ou saturado
        if (s2_r134 >= s_r134[0]) and (s2_r134 <= s_r134[-1]):
            h_r134 = (dado_r134['Entalpia h  kJ/kg']).dropna()
            f4_r134 = interpolate.interp1d(s_r134,h_r134)
            h2_r134 = f4_r134(s2_r134)
            self.Respostas.insert('3.0','h2: {:.2f}kJ/kg \n'.format(h2_r134))
        else:
            f4_r134 = interpolate.interp1d(p_r134,hvs_r134,kind='cubic')
            h2_r134 = f4_r134(P2)
            self.Respostas.insert('3.0','h2: {:.2f}kJ/kg \n'.format(h2_r134))
            
        h2_r134_real =  h1_r134 +((h2_r134 - h1_r134)/eficiencia)
        
        
        #PONTO 3 e 4
        #realiza interpolação com base nos dados anteriores
        hl_r134 = dados_r134['Líquido hl']
        f5_r134 = interpolate.interp1d(p_r134,hl_r134,kind='cubic')
        h3_r134 = f5_r134(P3)
        h4_r134 = f5_r134(P3)
        self.Respostas.insert('4.0',"Pressão 3: {:.2f}KPa \n".format(P3))
        self.Respostas.insert('5.0',"h3: {:.2f}kJ/kg \n".format(h3_r134))
        self.Respostas.insert('6.0',"h4: {:.2f}kJ/kg \n".format(h4_r134))
        
        #Vazão massica e calor
        
        QL = carga_total * (4.18/3600)
        m_r134 = QL/(h1_r134 - h4_r134)
        self.Respostas.insert('7.0','Vazão Massica Fluido Refrigerante: {:.2f}kg/s \n'.format(m_r134))
        QH = (h2_r134_real - h3_r134)*e_t
        QL1 = (h1_r134 - h4_r134)
        self.Respostas.insert('8.0',"Ql: {:.2f}KJ/Kg \n".format(QL1))
        self.Respostas.insert('9.0',"Qh: {:.2f}KJ/Kg \n".format(QH))
        Wbomba = g*H
        h8_r134 = f5_r134(P8)
        
        h5_r134 = h8_r134 + QH
        
        h6_r134 = Wbomba+h5_r134
        self.Respostas.insert('10.0',"W bomba: {:.2f}KJ/Kg \n".format(Wbomba))
        
        #Ponto 5 e 6        
        P6 = ro*g*H/1000
        self.Respostas.insert('11.0',"h5: {:.2f}KJ/Kg \n".format(h5_r134))
        self.Respostas.insert('12.0',"Pressão 6: {:.2f}Kpa \n".format(P6))
        self.Respostas.insert('13.0',"h6: {:.2f}Kpa \n".format(h6_r134))

        #Ponto 7 e 8
        P7 = ((ro*g*H_r)/1000) + P8
        self.Respostas.insert('14.0',"Pressão 7: {:.2f}KPa \n".format(P7))
        
        h7_r134 = f5_r134(P7)
        self.Respostas.insert('15.0',"h7: {:.2f}kJ/kg \n".format(h7_r134))
        self.Respostas.insert('16.0',"Pressão 8: {:.2f}KPa \n".format(P8))
        self.Respostas.insert('17.0',"h8: {:.2f}kJ/kg \n".format(h8_r134))
        
        #Vazão agua
        m_agua_r134 = (e_t*m_r134*(h2_r134_real - h3_r134 ))/(h5_r134 - h8_r134)
        
        self.Respostas.insert('18.0',"Vazão massica de água: {:.2f}Kg/s \n".format(m_agua_r134))
        
        COP = QL/(QH-QL)
        self.Respostas.insert('19.0','COP: {} \n \n \n \n \n'.format(COP))

        self.Respostas['state'] = 'disabled'
        
            





